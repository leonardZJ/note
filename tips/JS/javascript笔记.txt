js组成：ESMAscript(解释器),DOM(文档对象模型),BOM(浏览器对象模型)

变量
定义变量
var a = 123;
变量类型
number,boolean,string,function,object,undefined
tips：最好同一个变量储存同一种类型
变量命名
驼峰式：单词首字母大写，变量和函数命名都遵守
匈牙利命名法：第一个字母用类型的首字母，函数不用遵守
连等
js允许连等例：a=b=c=6;a = 6,b = 6,c = 6


流程控制
if条件语句：
{# 	if(...) {
		...
	} else if(...) {
		...
	} else {
		...
	} #}
switch条件语句：#当x等于case时执行
<script>
	switch(x) {
		//当x为1时执行
	    case 1:
	        //...
	        break
	    //当x为2时执行    
	    case 2:
	        //...
	        break
	    //当x为3时执行   
	    case 3:
	        //...
	        break
	    default:
	    	//所有都不符合则执行
	}
</script>
三元(三目)运算符：
{# 	...? ... : ... #}
while循环
{# 	while() {
		...
	} #}
for循环(较常用)
{# 	for(var i = 0; i < list.length;i++) {
		...
	} #}
for in循环(主要用于遍历对象,i会获得key)
{# 	for(var i in Obj) {
		...
	} #}


String方法
string.charAt(x)：获取字符串指定下标的字符，x为下标	
string.toLowerCase()：将字符串转为小写
string.toUpperCase()：将字符串转为大写
string.search(x)：获取字符段在字符串中的下标，没找到返回-1
string.split('x')：分割字符串，x为分割符，返回数组(不包含x)

Number方法
parseInt(x):将x转化为整数
parseFloat(x):将x转化为小数(如果不知道x类型，parsefloat包含了parseInt的功能)
原理：计算机从左到右扫描x，一旦发现非数字数据，立即中断执行，返回已经获得的数字
isNaN(x):检测x是否为数字


Boolean方法
==：先转化类型，再进行比较
===：不转化类型，直接进行比较
!=:先转化类型，再进行比较
!==:不转化类型，直接进行比较
-：减之前先转化类型，再进行相减
%：求模，两数取余数(利用for循环i%2=0可以得到0,2,4...剩下的就是1,3,5...)


Array方法
建议一个数组只存同一种类型数据
array.indexOf(element):返回数组某个元素的下标
array.push(x):添加x到数组最后
array.pop():删除最后一个元素
array.shift():删除开头一个元素
array.unshift(x):添加x到数组开头
array.splice(x,y):从位置x开始删除y个元素
array.splice(x,y,z...):从位置x开始删除y个元素并添加z...
array.splice(x,0,z...):从位置x开始删除0个元素并添加z...
array.splice(x,1,z):从位置x开始删除1个元素并添加z(替换)
array1.concat(array2):连接数组1和2
array.join('-'):用-连接数组中的元素并返回成一个字符串
array.sort():将数元素按字母排序(ASCII)并返回新数组，无法排序数字(sort只认识字符串)，如果要排序数字，则需在括号中传入比较函数)
{# 例： 
	array.sort(function(n1,n2) {
		if(n1 < n2) {
			return -1 <!-- 只要是负数都行 -->
		} else if(n1 > n2) {
			return 1 <!-- 只要是正数都行 -->
		} else {
			return 0
		}
	})
说明：if判断流可以简写为 return n1-n2;
原理：sort会将数组的值一个个代入进行比较，由正负值判断排序结果 #}


Function方法
全局变量和局部变量
{# 说明：作用域在全局的，叫全局变量，作用域在局部(例如函数内部)的，叫做局部变量 #}
闭包
{# 一般情况下局部变量不能被外部函数引用，不过有一个例外：当包含局部变量的函数体内部还存在另一个子函数，这个子函数就可以引用这个变量，这种情况就叫闭包 #}
函数返回值
{# 一个函数运行一次只有一个返回值(不过可以利用json返回多个值)，函数在哪调用，值就就返回到哪，可以赋值给变量 #}
Tips:建议一个函数只返回一种类型的值
arguments
{# 本质为数组，将arguments写在函数中，会把传入该函数的参数整合在arguments中成为一个数组 #}
{# 例：#实现函数不定参数
function sum() {
	result = 0;
	for(var i = 0; i < arguments.length; i++) {
		result += arguments[i];
	}
	return result;
}
说明：如此sum()就可以传入不定数量的参数了 #}


DOM方法
获取DOM元素
{# .getElementById('id')：获取单个元素
.getElementByName('name')：获取name属性等于...的元素,返回数组
.getElementsByTagName(div)：获取多个元素，返回数组
.getElementsByClassName('class')：获取多个元素，返回数组
 #}
创建DOM元素
{# var a=document.createElement(标签名)：创建一个元素
a.innerHTML=oTxt.value ：为创建的元素填入内容 #}
插入DOM元素
{# y.appendChild(x)：将元素插入子元素集合中的末尾，x为插入的元素，y为子元素集合，一般与创建元素配合使用，如果x原来有父级元素，append()会先将x从原来的父级中删除，再执行插入操作
y.insertBefore(x,z)：将元素插入子元素集合中指定位置子元素的前面，x为插入的元素，y为子元素集合，z为子元素集合中指定位置的子元素(如y[0]表示第一个子元素)，一般与创建元素配合使用
(IE下如果子元素集合没有元素会报错，需用if判断oLi.length是否为0，为零则执行appendChild(x)) #}
删除DOM元素
{# y.removeChild(y.childNodes[x])
说明:删除子节点，需由父节点调用，y为父节点，x为子节点下标 #}
设置DOM属性
{# .getAttrbute(x)：获取元素某属性，x为属性名
.setAttrbute(x,y)：设置元素某属性的值，x为属性名，y为属性值
.removeAttrbute(x)：删除元素某属性，x为属性名 #}

表格方法
{# .tBodies[0]：获取表格主体
.tBodies[0].rows:获取行
.tBodies[0].rows[1].cells[1]:获取列(单元格,第[0]个是表头)
.tHead：获取表头
.tFoot：获取表尾 #}

Event对象方法
被触发的事件的执行函数里会接收到event对象,通过该对象可获取与被触发事件相关的属性和方法(注：获取时在事件执行函数括号里写上(ev))
{#
event.target：获取发生事件的DOM元素(IE有兼容问题)
event.preventDefault()：阻止浏览器默认行为
event.clientX：获取鼠标点击的横坐标(可视区坐标)
event.clientY：获取鼠标点击的纵坐标(可视区坐标)
event.cancelBubble：取消事件冒泡(将这个属性赋值为true)
event.keyCode：获取键盘返回值	
event.ctrlKey：判断ctrl是否被按下，如果是返回true
event.shiftKey：判断ctrl是否被按下，如果是返回true
event.altey：判断ctrl是否被按下，如果是返回true
#}
常见事件
{# window.onload：当页面加载完成时
onclick：鼠标点击
onmouseover：鼠标移入(该事件可以被子元素继承)
onmouseenter：鼠标移入(只会在绑定的元素上生效)
onmouseout：鼠标移出(该事件可以被子元素继承)
onmouseleave：鼠标移出(只会在绑定的元素上生效)
onmousedown：鼠标按下
onmouseup:鼠标放开
onkeydown：键盘按下
onkeyup：键盘放开
oncontextmenu：点击右键,在执行函数中返回false可屏蔽右键菜单
onsubmit：表单提交事件 
#}
事件方法
{# object.attachEvent('x',y):绑定事件(可绑定多个同名事件)，x为绑定的事件(如onclick),y为执行函数
object.detachEvent('x',y):解除绑定事件
object.addEventListener('click',执行函数,false)：FF和chrome绑定多个同名事件写法，注意事件前面没有on
object.removeEventListener('click',执行函数,false):解除绑定事件
object.setCapture()：事件捕获，IE独有，将整个document的事件捕获并绑定到当前object中(相当于整个页面中的事件都消失了)
object.releaseCapture()：清除事件捕获(整个页面中的事件重新生效)
 #}



其他属性
.childNodes：获取子节点(只算第一层),返回一个数组(高版本的浏览器会计算文本节点，IE7以下则不会)
.nodetype：获取节点类型，文本节点是3，元素节点是1
.nodeName：获取节点名称，元素节点为标签名，属性节点为属性名，文本节点为text,文档节点为document
.children：获取除文本节点外的子节点(只算第一层)
.parentNodes：获取某元素的父节点，返回一个节点对象
.offsetParent：获取某元素用于定位的父级，返回一个节点对象
.firstChild：获取某元素的第一个子节点(高版本的浏览器会计算文本节点，IE7以下则不会)
.firstElementChild：获取文本节点外的第一个子节点(低版本浏览器不兼容,会显示该元素节点不存在)
.lastChild：获取某元素的最后一个子节点(高版本的浏览器会计算文本节点，IE7以下则不会)
.lastElementChild：获取除文本节点外的最后一个子节点(低版本浏览器不兼容,会显示元素节点不存在)
.nextSibling：获取某元素的的下一个兄弟节点(高版本的浏览器会计算文本节点，IE7以下则不会)
.nextElementSibling：获取某元素除文本节点外的下一个兄弟节点(低版本浏览器不兼容,会显示元素节点不存在)
.previousSibling：获取某元素的的上一个兄弟节点(高版本的浏览器会计算文本节点，IE7以下则不会)
.previousElementSibling：获取某元素除文本节点外的下一个兄弟节点(低版本浏览器不兼容,会显示元素节点不存在)




创建文档碎片：将所有东西打包后再渲染，对低版本性能有稍微提升，对高版本性能反而下降
.createdDocumentFragment()


DOM浏览器兼容
FF，IE9以上最支持
chrome中间，chrome会计算文本节点
IE6-8最差





Tips
1.局部变量优先于全局变量，但要先判断函数是否有执行过，没执行过相当于没创建局部变量
2.数组.length：数组的长度
{# (例：a.length表示数组a的长度) #}
3.this：当前发生事件的元素
说明：它是函数运行时，在函数体内部自动生成的一个对象，只能在函数体内部使用。
{# (例：this.onclick表示当前发生点击事件的元素) #}
4.innerHTML:某元素里面的内容(input用的是value)
5.+:可以用作字符串拼接，当链接字符串和数字的时候数字不用加'',字符串+数字=字符串
6.用style操作属性时，本质是在行间添加样式，而如果在外部或内部样式表已经写过这类样式，要考虑权重问题
7.string.substring(from, to)用法
说明：截取字符串中的一段，字符串等同于数组，from表示字符串中第一个字符的下标，to表示字符串中最后一个字符的下标(可不加)
{# 例：var a = 'hello'; a.substring(1,3) ==> ell #}
8.eval(str)用法
{# 说明：将括号中的字符串解析成表达式并执行，返回执行结果，正式开发中尽量少用 #}
9.class为js保留字段，写class名时改写成className
10.获取非行间样式：
{# 	IE下：元素.currentStyle
	chrome和FF：getComputedStyle(x,y) #x为元素,y随便填都行(一般填null) #}
11.数组的length是可以赋值的，如果length被赋值后小于之前长度，会清掉后面的元素(利用此特性可以快速清空数组)
12.setInterval注意点：页面刚刷新时，定时器需要等待指定的时间后才会运行执行函数，比如设定时间为1000，则需要过1秒定时器才会运行执行函数
13.用DOM操作的元素集合不是array,只拥有[]方法和length方法，其他数组方法不适用
14.多物体运动时，关键变量(如speed)不能共用，否则会出问题
15.直接给body加事件，有可能不会生效，body的宽高由内容决定，如果body内没有东西，body就没有范围，解决办法是给document加是事件(document代表整个网页)
16.onkey类事件应该加给当前鼠标的焦点位置




三大输出语句
1.
alert(''):弹出警示框(带确定按钮)，完整写法是window.alert('')
confirm(''):弹出询问框(带确定和取消按钮)，完整写法是windows.confirm('')
2.console:控制台输出，一般用于测试
	console.log(''):普通提示
	console.warn(''):警告提示
	console.error(''):错误提示
3.document.write(''):文档打印输出，直接在网页中显示

两大调用法(相当于'的')
.方法：A.属性
[]方法：A['属性']
(PS:任何点方法都可以写成'[]'方法，[]方法的优势是[]里的值可以写变量，)
例：document.getElementById('id').style.width=...


使用流程
1.首先获取相关元素
获取元素的两大方法
	获取单个元素：
		document.getElementById('id')
	获取一组元素：
		document.getElementsByClassName('class')
		document.getElementsByTagName('div')
		前面document可换成某集合，可以跟单元素获取配合使用，选中某元素下的所有子元素，最终会获得一个数组(类似python的list)
获取元素的新方法：
	获取单个元素：
		document.querySelector('')
		说明：括号里可以加.class和#id和标签名，还可以像选择器一样嵌套选择，当选择的元素有多个，默认选择第一个
	获取一组元素：
		document.querySelectorAll('')
		说明：括号里可以加.class和#id和标签名，还可以像选择器一样嵌套选择，前面document可换成某集合，可以跟单元素获取配合使用，选中某元素下的所有子元素，最终会获得一个数组(类似python的list)

2.在script里写事件
事件三要素：事件源，事件，事件处理程序
事件源：要触发的对象，名字
事件：如何触发，动词
事件处理程序(事件函数)：发生了什么，结果

使用方法：事件源.事件=事件处理函数
例：div.onclick = function() {
	a.style.display = "none";
};






函数  #将操作语句写入函数中，然后直接调用函数
函数定义：function 函数名(参数1,参数2...)
	 {
	 	语句(例如：document.getElementById(参数).style.属性='值');
	 };
函数调用：事件="函数名(参数1,参数2...)";

匿名函数
定义函数时也可不写名字，这样函数将变为匿名函数
说明：a.window.onload=function ()
	 {
	 	语句;
	 };
匿名函数避免取名字的麻烦，但其在定义时就会被直接执行了，而网页是从上往下加载的，当匿名函数被写在head里，网页加载到匿名函数就会报错(找不到函数指向的对象)，所以使用window.onload事件控制其在网页加载完时再执行，平常使用的基本都是匿名函数，所以几乎都会使用window.onload


定时器
间隔型定时器：
	setInterval(执行的函数,时间毫秒);
	说明：每隔固定时间执行函数
延时型定时器：
	setTimeout(执行的函数,时间毫秒);
	说明：一段时间后执行函数

定时器的开关
打开定时器：
	直接写setInterval和setTimeout就相当于打开了定时器
关闭定时器：
	clearInterval()和clearTimeout()
	说明：括号里写setInterval()和setTimeout()的返回值(函数本身),可以先用一个变量储存
例： btn1.onclick = function() {
		timer = setInterval(function() {
			alert('a');
		},1000);
	};
	btn2.onclick = function() {
		clearInterval(timer);
	};

Ajax
原理：浏览器通过网页中的一段js代码发请求，服务器接收请求后会将请求封装到request对象中(无论是从哪里发送过来的请求)，requset交由后台处理之后，返回的响应结果封装到response中，返回给发送请求的js代码，js代码解析response(一般为json或xml数据)，使用里面的而数据填入网页(innerHTML)当中，就完成了异步刷新

常用XMLHttpRequset()属性和方法：
.open()：连接服务器的方法，接收三个参数：请求方法，文件名，传输方式(true异步false同步)

.send()：发送请求的方法，如果请求方式为get，send()参数为null，如果请求方式为post，send()参数为请求实体(格式为：'key1=value1&key2=value2...')

.responseText：服务器端响应的数据

.readystate：请求状态，用4个值代表不同请求状态：
				0 (未初始化)未运行到open方法
				1 (载入)已运行到send方法，正在发送请求
				2 (载入完成)已运行完send方法，已收到全部响应内容
				3 (解析)正在解析响应内容(解压或解密)
				4 (解析完成)响应内容解析完成，可以在客户端调用了
说明：请求完成不代表请求成功，只代表请求过程执行完了，请求结果可能为成功也可能为失败

.status:响应状态码，常用：200 一切正常
						404 请求资源不存在
						500 服务器故障(用户端可以写服务器繁忙)
说明：响应状态码代表了请求是否成功

操作流程：
1.创建XMLHttpRequset对象：
{#  var ajax = new XMLHttpRequset() #}
2.为XMLHttpRequset对象添加事件onreadystatechange(状态改变)：
{# 	ajax.onreadystatechange = function() {...}
	说明：该事件会返回readyState属性的值，可通过.readystate获取在执行事件的执行函数前先判断readystate和status是否为4和200，如果符合则执行相关语句，不符合则给出回应 #}
3.发送请求：
{# 	
get请求：
		ajax.open('get','url',true)
		ajax.send(null)
说明：请求实体可以用getElementBy...从网页中获取，将请求实体拼接在url后面('url?+key1=value1&key2=value2...'),send括号里写null
post请求：
		ajax.open('post','url',true)
		ajax.send('key1=value1&key2=value2...')
说明：请求实体可以用getElementBy...从网页中获取，将请求实体写在send中,如果请求不成功，很可能是数据格式未设置，需要在ajax.send()前先加上ajax.setRequsetHeader = ('Content-Type','application/x-www-form-urlencoded') 
#}
4.处理响应
{# 	通过responseText获取后，解析数据，插入网页 #}

封装Ajax
步骤分解
1.创建XMLHttpRequset对象
	var ajax = new XMLHttpRequset()

2.使用ajax.open方法连接服务器，接收三个参数：请求方法，文件名，传输方式(true异步false同步)
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)

3.使用ajax.send()方法发送请求
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)
	ajax.send()

4.调用ajax.onreadystatechange方法，该方法会在服务器响应时(状态发生改变)执行
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)
	ajax.send()
	ajax.onreadystatechange = function() {}

5.在ajax.onreadystatechange方法中写入执行语句，并加上判断条件：当请求完成时即ajax.readystate==4时继续执行后续语句，也可以为请求未完成加上反馈语句(不常用)
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)
	ajax.send()
	ajax.onreadystatechange = function() {
		if(ajax.readystate==4) {
			...
		} else {
			console.log('请求失败')
		}
	}
6.在请求完成语句中写入第二层判断：当请求成功时即ajax.state==200时继续执行后续语句，也可以为请求失败时加上反馈语句
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)
	ajax.send()
	ajax.onreadystatechange = function() {
		if(ajax.readystate==4) {
			if(ajax.state==200) {
				...
			} else {
				console.log('请求失败，错误代码为' + ajax.state)
			}
		} else {
			console.log('请求未完成')
		}
	}
7.在请求成功语句中接收服务器返回的数据(ajax.responseText)，并做相应操作
	var ajax = new XMLHttpRequset()
	ajax.open('GET','x.txt',true)
	ajax.send()
	ajax.onreadystatechange = function() {
		if(ajax.readystate==4) {
			if(ajax.state==200) {
				ajax.responseText...
			} else {
				console.log('请求失败，错误代码为' + ajax.state)
			}
		} else {
			console.log('请求未完成')
		}
	}





json数据
说明：分json字符串和json对象两种类型，json字符串必须带""用于传输,json对象不用""便于调用方法和属性
两种结构：对象和数组:
		   对象：{"key1":"value1","key2":"value2"}
		   说明：如果value值为常数则不用""
		   数组：[{"key1":"value1","key2":"value2"},{"key1":"value1","key2":"value2"}]
		   说明：如果value值为常数则不用""
读取JSON对象中的值：
	Alert(obj.key1);Alert(obj.key2);...
JSON字符串转换为JSON对象:
	1.var obj = eval('(' + str + ')'); 所有数据都可以解析，不安全
	2.var obj = JSON.parse(str); 只解析格式正确的数据，安全(常用)
	3.var obj = str.parseJSON(); 只解析格式正确的数据，安全
将JSON对象转化为JSON字符串:
	1.var last=JSON.stringify(obj);(常用)
    2.var last=obj.toJSONString();

使用JSON创造命名空间
说明：大型项目会有多人进行开发，如果同个变量名被多次使用，会造成覆盖风险，所以用JSON创造一个命名空间，在命名空间中进行变量或函数的定义(同名json无法重复声明)

面向对象
类：用于生产的模型，Array,Date等类(例new Date())
对象：被生产出来的产品，js里所有数据都是对象，对象有属性和方法
对象的属性
{# 对象的属性本质是变量，不过是该对象专有的变量，所以改叫属性
所有对象都可以添加自定义属性，格式为：object.a = ...
调用属性时用.a #}
对象的方法
{# 对象的方法本质是函数，不过是该对象专有的函数，所以改叫方法
所有对象都可以添加自定义函数，格式为：object.a = function(){}
调用方法时用.a() #}
静态方法
静态方法可以在调用对象方法时无需事先实例化对象，直接进行调用(如Math.方法)
this
this：当前的方法属于谁，this就是谁

object类对象
{# 说明：不同于其他类对象拥有各种复杂的方法和属性，object类对象基本就是一张白纸，可以随意的赋予属性和方法 #}

创建object对象
	var obj = new Object()
添加属性(本质上是给变量赋值)
	obj.a = ...
添加方法(本质上是给变量赋值)
	obj.a = function() {...}
封装1(工厂方式)
说明：本质是外面包一层函数然后返回对象到外面，这种函数就叫构造函数，这种方法叫工厂方法)
	function MyObject(x,y) {
		//原料是对象
		var obj = new Object()
		//添加属性和方法是加工过程
		obj.a = x;
		obj.b = y;
		obj.c = function() {
			alert(obj.a + obj.b);
		}
		//完成后返回对象是出厂
		return obj;
	}
创建对象：var a = MyObject(1,2)
注：工厂方法会有弊端，例如会占用很多的系统资源(因为每个方法相互之间都不相等，所以每个方法被调用时都占用一份资源)

封装2(new方法)
new
说明：任何函数前面都能加new,加了new会隐式创建的一个新对象，并且如果函数内部有this会指向这个新对象，new可以默认创建新对象，所以封装函数内部就不用再创建了
封装变成：
	function MyObject(x,y) {
{# 		var obj = new Object()这句变成隐式			#}

		//添加属性和方法是加工过程
		this.a = x;
		this.b = y;
		this.a = function() {
			alert(obj.a + obj.b);
		}

{# 		return this;这句也变成隐式 					#}
	}
创建对象变成：var a = new MyObject(1,2)

封装3(原型方法)
原型(prototype)
说明：可以作为类添加属性或方法的模板，生产出来的对象可以马上拥有这种属性或方法并且可以解决资源浪费问题
{# 例：
	Array.prototype.sum = function() {...}
	var a = new Array(...)
	说明：这时候的a直接就拥有了a.sum()这种方法 #}
封装变成：
	MyObject.prototype.sum = function() {...}
	function MyObject(x,y) {
		this.a = x;
		this.b = y;
	}
}
{# 		this.sum = function() {
			alert(obj.a + obj.b);
		}							方法被添加在类中	#}
	}
创建对象变成：var a = new MyObject(1,2)

说明：这种构造函数和原型相互搭配使用的方法叫混合法(混合的构造函数/原型方式)，在编程中被广泛运用，这就是面向对象编程

对象的继承
.call(x,y,z):用于改变函数执行时内部this的指向，x为新指向的对象，y，z为相应的参数可以利用这个特性做属性继承
例:
function A() {
	this.a = 12
}
A.prototype.show() {
	alert('aaa')
}
//属性继承
function B() {
	A.call(this) 
}
说明：这里this代表B对象，也就是将A对象里的this(A自己)，改成了B对象，所以现在console.log(B.a)也会得到12(即B对象获得了属性a)
//方法继承1(有缺陷)
B.prototype = A.prototype;
说明：将A的prototype赋值给B的prototype,这样B就指向A的原型(包括方法)，但如果给B.prototype添加方法，会导致A.prototype也被改变(AB都指向同一个原型)
//方法继承2(完善)
for(let i in A.prototype){
	B.prototype[i] = A.prototype[i]
}
说明：把A的prototype的每一项遍历添加给了B的prototype(先用i获得key,再将每个key的值赋给B，相当于复制了整个prototype)

类方法的重写
说明：核心就是变量的重新赋值(属性和方法都是变量的赋值)，一般先新建一个子类继承父类的所有属性方法(避免修改到原本的类)，然后将需要重写的属性或方法(变量)找出来(建议包括值一起复制一份用于改写)

类方法的维护
父类的某种方法进行修改后，子类也会发生变化，所以一般只需要维护父类就可以了，非常方便

添加实例属性和方法
当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性；换句话说，添加这个属性只会阻止我们访问原型中的那个属性，但不会修改那个属性。即使将这个属性设置为null，也只会在实例中设置这个属性，而不会恢复其指向原型的连接。不过，使用delete操作符则可以完全删除实例属性，从而让我们能够重新访问原型中的属性：
假设A对象的原型中有个name属性：
实例化两个对象a1,a2:
let a1 = new A();
let a2 = new A();
//为a1添加属性name
a1.name = ...; //这时候name属性只是添加在实例身上,而没有修改原型name的值
//调用a1,a2的name属性
alert(a1.name); //先搜索实例中是否有name属性，找到了，搜索停止，返回实例的name属性的值
alert(a2.name); /先搜索实例中是否有name属性，没找到，继续搜索原型中是否有name属性，找到了，搜索停止，返回原型name的值
//删除a1中的name属性
delete

定义接口(API)
本质：输入一个数据，经过一翻计算，输出一个数据
入口一般是输入参数的方式，出口是返回值的方式，入口和出口一般都是一个变量


本地对象(new出来才能用(实例化))：常用比如Array,Boolean,Date,Error,Function,String,Object,Number
内置对象(不用new出来就能用(无需实例化))：常用比如Math,Global(只存在概念中)
宿主对象(由运行环境(如浏览器)提供的对象)：DOM,BOM

变量提升
当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到当前作用域的开头(变量的提升不包括赋值)

关于false值之间的比较
1.false、0、空串三者是可以互等的
2.null和undefined可以互等,但是不与其他几种相等
3.NaN不与其他任何值相等,甚至与自己都不等(六亲不认,失去自我)

cookie
根据浏览器一般容量为4k-10k左右
以域名为单位，一个域名一套cookie

cookie怎么用
在cookie中添加数据
给document.cookie赋值即可，格式必须为：'name = abc'
注1：cookie属性多次赋值不会覆盖前面的记录，会一条条保存下来
注2：不设置过期时间默认关闭浏览器后cookie消失
<script>
	document.cookie = 'name = leonard'
	document.cookie = 'password = 1234'
</script>

给每条cookie设置过期时间
<script>
	//创建一个日期对象
	var oDate = new Date();
	//将这个日期对象的时间设置成未来的某一天（过期的那一天）
	oDate.setDate(oDate.getDate() + 天数)
	//将过期时间赋值给expires，一并添加到cookie中
	document.cookie = 'name = leonard;expires = oDate'
	document.cookie = 'password = 1234;expires = oDate'
</script>

删除cookie中的数据：将cookie的expires（过期值）设成昨天即可
<script>
	//创建一个日期对象
	var oDate = new Date();
	//将这个日期对象的时间设置成昨天（减一天）
	oDate.setDate(oDate.getDate() - 1)
	document.cookie = 'name = leonard; expires = oDate'
</script>

封装cookie存储函数
<script>
	//封装添加cookie的函数
	function setCookie(name,value,iDay) {
		var oDate = new Date();
		oDate.setDate(oDate.getDate() + iDay)
		document.cookie = name + '=' + value + '; expires = '+ oDate
	}
	
	//封装取cookie的函数
	function getCookie(name) {
		//cookie中的数据的分隔符是分号加空格
		var arr = document.cookie.split('; ') 
		for(var i = 0; i < arr.length; i++) {
			var arr2 = arr[i].split('=')
			if(arr2[0] === name) {
				return arr1[1];
			}
		}
		return '' //如果没找到就返回空字符串
	}

	//封装删除cookie的函数
	function removeCookie(name) {
		setCookie(name,1,-1); 将过期时间设置为昨天
	}
</script>




异常捕获
try {
	//没报错时执行的语句(要检测的语句)
	...
} catch(e) {
	//报错时执行的语句
	...
} finally {
	//无论如何都执行的语句
	...
}
说明：try后面写要检测的语句，catch后面写处理的语句,finally后面写最终执行的语句(一般用来释放资源)，也就是说如果try语句中发生错误，try里面的代码都不会执行，直接跳到catch里面的语句执行，然后继续执行外部的代码(整体不会中断)，如果没有发生错误，catch里面的语句不会执行，最后不管有没有错误finally语句都会执行，异常捕获一般用不到，不过在写框架的时候加入会让框架变的健壮
抛出异常
说明：使用throw关键字
格式：
function text(a) {
	if(a==undefined){
		throw new Error('请传递参数')
	}
}
注：当在被调函数内发生异常的时候，异常会一级一级往上抛出。






实例1：鼠标移出移入提示信息
思路：鼠标移入：onmouseover，鼠标移出：onmouseout，display属性切换block和none
实例2：页面整体换肤
思路：点击：onclick，href属性切换两套css
实例3：点击变化输入框文字
思路：点击：onclick，input的value属性切换
实例4：点击下拉菜单
思路：点击：onclick,判断display是否为none
实例5：为邮箱的多个div加相同属性
思路：点击：onclick,获取多个元素getElementsByTagName('div'),通过while/for循环迭代，getElementsByTagName('div').length获取元素数量
实例6：全选/全不选按钮
思路：用getElementById('id')和getElementsByTagName('div')配合选出所有子选框，html属性里checked控制选中状态
，在js里写checked=true/false控制是否选择，用while循环迭代，getElementsByTagName('div').length获取元素数量
实例7:反选
思路：在实例6中加入if判断语句即可
实例8选项卡
思路：按钮部分：this让当前按钮高亮(变颜色)，this事件触发前先初始化所有按钮(去掉所有颜色)，div部分：当div的display为none时位置也会消失，后面的div会往前推，按钮的顺序就是div的顺序，由此可以标记出每个div，用for循环给每个div加上自定义属性： 属性名="值"(例：index="1",主要用作标记，直接添加在行间会被大部分浏览器过滤掉，通过js添加可以避免这种问题)，用for循环迭代时每个index编号都按顺序自增，将点击事件的this.index做为div数组的下标来控制div属性
实例9：年历+活动事件
思路：上面12个按钮，下面一个div,12个按钮同实例8
实例10：数字时钟，秒的数字会动
思路：
实例11：延时提示框，qq头像提示框
思路：使用setTimeout()控制block的消失时间
实例12：页面滚动条
思路：
实例13：点击按钮让整行消失
思路：让父元素消失
实例14：点击按钮添加<li></li>
思路：
实例15：让物体做匀速运动
思路：
实例16：侧边栏伸缩
思路：
实例17：让元素淡入淡出(修改透明度)
思路：
实例18：缓冲运动
思路
实例19：缓冲菜单
思路：
实例20：鼠标跟踪提示框
思路：
实例21：鼠标跟随图片
思路：
实例22：键盘移动游戏
思路：
实例23：Ajax读取json数据
思路：
实例24：封装一个通过className获取元素的函数
思路：getElementByClass(父元素的集合，classname),var a=父元素的集合.getElementsByTagName('*'),var b=[],return b.push(选中的元素)，return b 




