基本概念
1.用户界面：包括地址栏、前进、后退按钮、书签菜单等，除了浏览器主窗口显示的你请求的页面外，其他显示的各个部分都属于用户界面
2.浏览器引擎：在用户界面和渲染引擎之间传送指令
3.渲染引擎：负责显示请求的内容，如果请求的内容是HTML，它就负责解析HTML和CSS 内容，并将解析后的内容显示在屏幕上，渲染引擎也被称为浏览器内核
4.网络：用于网络调用，比如 HTTP 请求，其接口与平台无关，并为所有平台提供底层实现
5.用户界面后端：用于绘制基本的窗口小部件，比如组合框和窗口，其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法
6.JavaScript解释器：也叫js引擎，用于解析和执行JavaScript代码，比如chrome的javascript解释器是V8
7.数据存储：持久层，浏览器需要在硬盘上保存各种数据(如Cookie),新的HTML规范(HTML5)定义了“网络数据库”，这是一个完整(但是轻便)的浏览器内数据库


1.首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来
2.接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了
3.TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据
4.数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件
5.首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错
6.浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件
7.文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 script 标签的话，会判断是否存在 async 或者 defer ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。
8.初始的 HTML 被完全加载和解析后会触发 DOMContentLoaded 事件
9.CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西
10.在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了

从输入 URL 到显示页面这个过程中，涉及到网络层面的，有三个主要过程：
DNS 解析
TCP 连接
HTTP 请求/响应
前两个不属于前端范畴，HTTP 连接这一层面的优化才是前端优化的核心。

两个优化方向：
1.减少请求次数
2.减少单次请求所花费的时间

浏览器缓存策略
浏览器缓存机制有四个方面，按照获取资源时请求的优先级依次排列如下：

Memory Cache 内存中的缓存，响应速度最快的一种缓存
Base64 格式的图片，几乎永远可以被塞进 memory cache，体积不大的 JS、CSS 文件，也有较大地被写入内存的几率，较大的 JS、CSS 文件往往被直接甩进磁盘。

Service Worker Cache 独立于主线程之外的 Javascript 线程
因为脱离于浏览器窗体，因此无法直接访问 DOM，也不会干扰页面的性能，可以帮我们实现离线缓存、消息推送和网络代理等功能。

HTTP Cache 又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。
两者都是先查看资源是否过期，强缓存查看本地，协商缓存询问服务器，得到答案后决定使用本地缓存还是重新请求资源

Push Cache HTTP2 在 server push 阶段存在的缓存。
存在于会话阶段的缓存，当 session 终止时，缓存也随之释放。

CSS优化建议
1.避免使用通配符，只对需要用到的元素进行选择。
2.关注可以通过继承实现的属性，避免重复匹配重复定义。
3.少用标签选择器。如果可以，用类选择器替代。错误：#dataList li{} 正确：.dataList{}
4.不要画蛇添足，id 和 class 选择器不应该被多余的标签选择器拖后腿。错误：.dataList#title 正确：#title
5.减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素。

DOM渲染优化
回流和重绘
回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。

重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。

js事件节流与防抖