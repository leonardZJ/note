环境变量
说明：将一些经常使用，需要在任何位置都能打开的文件的路径添加到环境变量中，之后在计算机的任意位置(dos下)输入文件名都可以打开文件
原理：计算机在打开文件时会先寻找当前文件，如果找不到则去环境变量中找

进程和线程
进程：为程序的执行提供必要的环境(相当于工厂)
线程：负责执行进程中的程序，是计算机中最小计量单位(相当于工人)
单线程：单个线程执行进程中的程序
多线程：多个线程执行进程中的程序

Node.js
Node.js可以让js代码在服务器端执行，让js代码可以直接跟系统进行交互(之前只能在浏览器中运行)，Node.js使用谷歌开发的V8引擎(运行速度较快)运行js代码

性能优化原理
客户端请求速度：由客户端带宽决定
服务器响应速度：由服务器带宽决定
服务器逻辑速度：由服务器代码的优劣决定(逻辑越好运行越快)
I/O速度：由磁盘硬件决定(有上限，所有优化最终的瓶颈都是I/O)

Node.js特点是单线程，不过单线程终究会有瓶颈，这时候可以通过增加服务器数量来提升性能(node.js对服务器的性能要求比较低)

模块化
在node中一个js文件就是一个模块
引入模块
require()
在node中通过require(x)引入模块，x为模块名称(核心模块)或路径(自定义模块)，如果写相对路径必须以.或..开头，require()函数会返回模块对象，不过一开始是一个空对象(console.log(require(x))输出{})，如果想要{}中有东西，需使用exports
exports
在node中每一个js文件中的js代码都是独立运行在一个自调用匿名函数中：(function() {...})()，这就造成了在其中声明的变量都属于局部变量，外部将无法引用
解决办法：可以通过给是exports对象添加元素来暴露属性或方法(exports.x = ...)，添加到exports里的元素会出现在require函数的返回对象中，可以通过require的返回对象直接访问属性和方法

global对象
说明：全局对象，所有在全局中创建的变量都会作为global的属性保存，所有在全局中创建的函数都会做为global的方法保存

arguments
说明：函数内部自动存在的一个伪数组对象，收集函数的实参

npm包管理器，安装完node.js就自带有，使用npm下载模块（包）分两种形式：
本地安装
1. 会将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。
2. 可以通过 require() 来引入本地安装的包。
全局安装
1. 会将安装包放在 /usr/local 下或者你 node 的安装目录。
2. 可以直接在命令行里使用。
如果你希望具备两者功能，则需要在两个地方安装它

相关命令
<script>
	//卸载模块：npm uninstall express，express模块名
	//更新模块：npm update express，express模块名
	//搜索模块：npm search express
	//查看所有全局安装的模块：npm list -g
	//查看项目中已安装的模块：npm list --depth=0
	//查看某个模块的版本号：npm list grunt，grunt模块名
	//生成 package.json 文件：npm init
	//发布模块：npm publish
	//npm help可查看所有命令

	//错误
	//ENOENT: no such file or directory, access
	//解决：使用cnpm镜像就可以了
</script>

Package.json 属性说明
name - 包名
version - 包的版本号
description - 包的描述
homepage - 包的官网 url 
author - 包的作者姓名
contributors - 包的其他贡献者姓名
dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下
repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上
main - main 字段指定了程序的主入口文件，require('moduleName') 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js
keywords - 关键字

问好
<script>
	//桌面新建 helloWorld.js文件，写入console.log('hello world!')
	//cmd运行：node helloWorld.js
	//输出：hello world!
</script>

第一个应用
<script>
	//引入node自带的http模块
	var http = require('http')

	//调用createServer方法创建服务器，listen监听8888端口
	http.createServer((request,response) => {
		//发送http头部信息，200表示成功，Content-Type内容类型为text/plain
		response.writeHead(200,{'Content-Type': 'text/plain'})

		// 发送响应数据 "hello world"
		response.end('hello world\n')
	}).listen(8888)

	//在终端（cmd）打印信息
	console.log('Server running at http://127.0.0.1:8888/')
</script>
