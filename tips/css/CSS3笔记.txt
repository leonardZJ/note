内部样式表：
<head>
	<style type="text/css">
		div {width: 100px; height:100px;}
	</style>
</head>
<body>
	<div></div>
</body>

内联样式：
<div style="width:100px; height:100px;"></div>

外部样式表：
1.建立style.css文件
div {width: 100; height:100;}
2.建立HTML文件
<head>
	<link rel="stylesheet" href="文件夹/style.css">
</head>
<body>
	<div></div>
</body>

内联样式表的优先级最高，内部样式表和外部样式表的优先级跟书写顺序有关，写在后面的优先级高

css语法：选择器+声明
div {属性1:值1;属性2:值2 值3 值4;}

选择器：
元素选择器：用节点元素作为选择器，可以用于大范围修改
ID选择器：用id作为选择器，设置ID名时避免重复
类选择器：用class类作为选择器，设置class时可以重复，表示将这些元素组成一组
类的声明：声明里同一个属性的多个值没有先后顺序，之间加空格或回车不也影响效果
<div class="box1 box2"></div>
通配符选择器：用通配器*作为选择器，常用于重置样式，例：* {margin:0px; padding:0;}
群组选择器：为多个选择器设置相同的样式时，可以用逗号隔开各个选择器，常用于设置相同的宽高
<style>
	div,#id,.class {
		width:600px; 
		height:50px;
	}
</style>
包含选择器：选择器之间用空格隔开，前面的选择器包含后面的选择器，代表某选择器下的选择器才受样式影响
<style>
	.class span {
		/* 表示选择.class下的span标签 */
	}
</style>
伪类选择器：
<style>
	a:link {color:red;} 超链接初始状态颜色
	a:visited {color:#eee;} 超链接被访问过后的颜色
	a:hover {color:#0f0;} 鼠标划过超链接时的颜色
	a:active {color:#00f;} 鼠标按下时超链接的颜色
</style>
注：伪类选择器联合使用时必须注意顺序，正常顺序为link,visited,hover,active
简化写法：
<style>
	/* 鼠标移过去时为绿色，其他时候为红色 */
	a {
		color:red;
	}
	a:hover {
		color:green;
	} 
</style>
选择器权重： #id为0100，.class为0010，div为0001
说明：多个选择符权重相互相加后再对比，权重重的样式生效，权重相同时排在后面的样式生效

文本类样式：
<style>
	/* 字体类型，从前往后搜索电脑里的字体 */
	div { 
		font-family:"微软雅黑","字体2","字体3";
	}
	/* 字体大小 */
	div {
		font-size: 32px;
	}
	/* 文本颜色，有16进制形式，rgb形式，rgba形式(带透明通道) */
	div {
		color: #fff;
	}
	/* 加粗，有bolder(更粗)/bold(加粗)/normal(常规)，或者100-900九个等级 */
	div {
		font-weight: 900;
	}
	/* 字体倾斜，有italic(倾斜)/oblique(更倾斜)/normal(常规) */
	div {
		font-style: normal;
	}
	/* 段落对齐，有left(左边对齐，默认值)/right(右边对齐)/center(居中对齐)/justify(两端对齐) */
	div {
		text-align: left;
	}
	/* 行高，实际效果为行间距，当单行文本行高等于容器(div)高，文字可以在div里居中对齐 */
	div {
		line-height: 32px;
	}
	/* 文本修饰，有none(无修饰)/underline(下划线)/overline(上划线)/line-through(删除线) */
	div {
		text-decoration: none;
	}
	/* 首行缩进，可取正负值，负值为悬挂缩进(超出页面范围) */
	div {
		text-indent: 32px;
	}
</style>

列表属性：
<style>
	/* 列表前的点，disc(实心圆)/circle(空心圆)/square(实心方块)/none(无列表符号) */
	div {
		list-style-type: none;
	}
	/* 用图片代替列表前的点，后面接url地址 */
	div {
		list-style-image: url(.../...);
	}
	/* 列表前点的位置，outside(在li外面)/inside(在li里面) */
	div {
		list-style-position: inside;
	}
	/* 去掉列表样式 */
	div {
		list-style: none;
	}
</style>

背景属性：
<style>
	/* 背景色 */
	div {
		background-color: #fff;
	}
	/* 背景图片 */
	div {
		background-image: url(.../...)
	}
	/* 背景平铺方式，no-repeat(不平铺)/repeat(平铺)/repeat-x(横向平铺)/repeat-y(纵向平铺) */
	div {
		background-repeat: no-repeat;
	}
	/* 背景图片的位置属性，水平对齐方式left/center/right,垂直对齐方式top/center/bottom */
	div {
		background-position: 10px 10px;
	}
	/* 背景缩写属性 */
	div {
		background: url(.../...) no-repeat 10px 10px;
	}
</style>

浮动属性
<style>
	/* 定义网页中其他文本如何环绕该元素，left(左浮动)/right(右浮动)/none(不浮动) */
	div {
		float: none;
	}
	/* 
	1.块元素原本独占一行，定义float后不再独占
	2.前面的块浮动后，相当于往屏幕方向浮起来，在后面的可以往上靠到前面的块的原来位置，就像靠在了浮起块的下面
	3.如果块元素里有东西(如文本)，里面的东西会围绕浮起来的块的周围，不会被遮挡
	 */

	/* 清除浮动，限制浮动某一侧不能有浮动(一般加在文档流上)，none(默认值)/both(两侧都不能有浮动)/left(左侧不能有东西)/right(右侧不能有东西) */
	div {
		clear: left;
	}

</style>
解决浮动高度塌陷问题:
1.给父元素添加声明overflow:hidden;
2.在浮动元素下方添加空div,并给该div添加声明
<style>
	div {
		clear:both;
		height:0;
		overflow:hidden;
		/* font-size:0;主要针对IE6以下的浏览器，默认高度是16px(最小字体高度)无法通过height:0;去掉 */

	}
</style>

盒模型
<style>
	/* 定义建立布局时元素生成的显示框类型 */
	div {
		display:none; 不显示元素，加上这个属性则该元素完全消失
		display:inline; 让元素拥有行内元素的特性
		display:block; 让元素拥有块元素的特性，如果元素加了浮动，则相当于加了block
		/* 行内块元素，让元素同时有行内元素和块元素特征，又可以自定宽高又可以同行显示，默认为行内块元素属性的有<img>和表单控件<input> */
		display:inline-block;
		display:list-item; 将元素转化成<ul><li></li></ul>,使其可以使用列表属性
		display:run-in;
		display:table;
		display:inline-table;
		display:table-row-group;
		display:table-header-group;
		display:table-footer-group;
		display:table-row;
		display:table-colume-group;
		display:table-column;
		display:table-cell;
		display:table-caption;
		display:inherit;
		/* 将对象变为弹性属性，当父元素变为弹性盒，子元素将变成float属性，并且父元素不会有高度塌陷 */
		display: flex;
		/* 将对象变为弹性属性，当父元素变为弹性盒，子元素将变成float属性，并且父元素不会有高度塌陷,宽度也随着子元素元素变化 */
		dispaly:inline-flex;
		
	}
	/* 
	
	 */
	/* 两种盒模型
	content-box: 采用标准模式解析计算(默认)，width包含border和padding
	border-box: 采用怪异模式解析计算，width不包含border和padding
	 */
	div {
		父元素的box-sizing: bborder-box，然后给父元素加paddinger-box;
	}
</style>
margin值(盒子和盒子之间的距离)
margin-bottom:下，单位px，还可以接auto表示居中
margin-left:左，单位px，还可以接auto表示居中
margin-right:右，单位px，还可以接auto表示居中
margin-top:上，单位px，还可以接auto表示居中
缩写：margin:值1,值2,值3,值4(原理跟padding一样)，常用：margin:0,auto;  
注1.某些元素默认会有margin值或者padding值，所以开发时先清除一下：* {margin:0;padding:0}
注2.相邻兄弟元素在垂直方向上的margin值会出现融合的情况，融合后会取两个元素里最大的值作为融合后的值
注3.如果父子级都设置了margin值，子元素的margin会传递给父元素，即margin会体现在父元素上，解决办法时在父元素加overflow：hidden;(变成BFC)

padding值(文本和盒子之间的距离)
padding-bottom:下，单位px
padding-left:左，单位px
padding-right:右，单位px
padding-top:上，单位px
缩写：padding：值1,值2,值3,值4;当只有1个值时表示上下左右，2个值时表示上下，左右，3个值时表示上，左右，下，4个值时表示上，右，下，左(逆时针)

border值(边框样式)
border-width:边框宽度,单位px
border-color:边框颜色,rgb或16进制
border-style:边框样式,有solid(实线)/dashed(虚线)/dotted(点划线)/double(双线)
缩写：border:边框宽度 边框风格 边框颜色;
单边框
border-bottom:底边框，后可接none和边框宽度 边框风格 边框颜色; 
border-left:左边框，后可接none和边框宽度 边框风格 边框颜色;
border-right:右边框，后可接none和边框宽度 边框风格 边框颜色;
border-top:上边框，后可接none和边框宽度 边框风格 边框颜色;

content(文本范围)

溢出样式overflow
overflow:定义溢出元素内容区的内容如何处理，有visible(默认值，任由溢出)/hidden(内容会被修剪，被修剪内容不可见)/scroll(内容被修剪同时显滚动条)/auto(如果内容被修剪则显示滚动条)/inherit(从父元素继承overflow属性值);
text-overflow:规定当文本溢出包含元素时发生的事情，有clip(裁切不显示省略号)/ellipsis(裁切显示省略号)
使用text-overflow时必须有：
1.容器的宽度width:value(px,%,都可以)
2.强制文本在一行内显示：white-space:nowrap;
3.溢出内容为隐藏：overflow:hidden;
4.溢出文本显示省略号text-overflow:ellipsis;

空白样式white-space
white-space:设置如何处理元素内的空白(空格和换行)，有normal(默认,空白被浏览器忽略)/pre(空白被浏览器保留)/nowrap(文本不换行，直到有<br>)/pre-wrap(保留空白符序列，正常换行)/pre-line(合并空白符序列，保留换行符，正常换行)/inherit(从父元素继承white-space属性值)

表单样式
<style>
	/* 去掉input输入框默认样式 */
	input {
		outline: 0;

	}
	/* 选中时的效果，必须用input:focus才行，不能用类名:focus */
	input:focus {
		border: 1px solid #dcdcdc;
        border-radius: 3px;
        box-sizing: border-box;
	}
</style>

css3新选择器
属性选择器
1.标签名[属性名]{规则}:用于选取带有指定属性的元素
2.标签名[属性名="值"]{规则}:用于选取带有指定属性和值的元素
3.标签名[属性名~="值"]{规则}:用于选取带有指定属性值中包含指定单词的元素
4.标签名[属性名|="值"]{规则}:用于选取带有指定属性值以指定单词开头的元素
以下为css3
5.标签名[属性名^="值"]{规则}:用于选取带有指定属性值以指定字符开头的元素
6.标签名[属性名$="值"]{规则}:用于选取带有指定属性值以指定字符结尾的元素
7.标签名[属性名*="值"]{规则}:用于选取带有指定属性值中包含指定字母.字符.单词.词汇的元素

伪元素选择器
语法：
在元素后添加html
::after {}
在元素前添加html
::before {}

伪类选择器
结构性伪类选择器
语法： :first-child {}和:last-child {}
说明：选择指定的第一个子元素和最后一个子元素
例：ul li:first-child {} 第一个子元素修改样式

语法： :nth-child(数字，顺序) {}和:nth-last-child(数字，倒序) {}
说明：选择指定位置的子元素，如果冒号前加标签(如：p:nth-child(x))，则选择位置为x且为p的元素(同时成立)，没有则不选择

括号里加奇数
语法： :nth-child(odd) {}和:nth-last-child(odd) {}
说明：所有第奇数和偶数个子元素

括号里加偶数
语法： :nth-child(even) {}和:nth-last-child(even) {}
说明：所有第偶数个子元素

括号里加表达式
语法： :nth-child(an+b) {}和:nth-last-child(an+b) {}
说明：所有相同类型标签的第an+b个子元素，a表示每次循环中共包括几种样式，b表示指定的样式在循环中的位置

说明：将child改为of-type可以让css3在计算子元素时只针对同类型的子元素，nth-child()不论元素类型计算位置，nth-of-type()针对同种类型

：only-child
选中只有一个子元素的标签

目标伪类选择器
：target
突出显示活动的HTML锚(被点击后目标锚高亮)

层级选择器
父元素>子元素 {}
说明：子选择器，选择某父元素下的一个子元素，只向下一层(包含选择器选择所有父元素下同名的子元素，不论有多少层）
元素1+元素2 {}
说明：相邻兄弟选择器，选择某父元素下的排在每个元素1后面的所有元素2，同时符合三个条件：与元素1为同一级别，排在元素1后面，元素名叫元素2即被选中
元素1~元素2 {}
说明：通用兄弟选择器，选择某父元素下的排在第一个元素1后面的所有元素2，同时符合三个条件：与元素1为同一级别，排在第一个元素1后面，元素名叫元素2即被选中

服务器端字体(P27)
客户端可以不用下载安装特定字体，可以从服务器端加载字体
语法：#字体有ttf和otf两种后缀，即truetype和opentype,对应写在format里面
先导入：@font-face {font-family:Webfont(自定义名字);src:url(路径)format(opentype/truetype)}
再调用：body {font-family:Webfont(自定义名字)}

iconfont
图标字体，本质为矢量图形，可以自由放大不产生锯齿，自由变换颜色
使用方法：
1.百度搜索阿里巴巴矢量图标库进入iconfont矢量图标库
2.下拉菜单选择官方图标库
3.选择一个类别进入后放入购物车
4.然后进入购物车下载代码
5.将下载的压缩包解压
6.打开demo_unicode.html,查看编号
7.把编号复制到需要的地方，同时加上class="iconfont"
8.<link>一下外部样式

css3新属性
1.背景属性
background-clip:border-box/padding-box/content-box
说明：背景裁剪
border-box:背景被裁剪到边框盒
padding-box:内容被裁剪到内边距盒
content-box:背景被裁剪到内容框

background-origin:border-box/padding-box/content-box
说明：修改默认背景位置(原本是从padding左上角开始)
border-box:默认从border左上角开始
padding-box:默认从padding左上角开始
content-box:默认从content左上角开始

background-image: url('第一张图片路径')，url('第二张图片路径'),...
background-repeat: no-repeat, no-repeat,...
background-size: 宽1 高1,宽2 高2,...
background-position: left1 top1,left2 top2,...
说明：background-size的值可输入固定宽高值和auto(auto的边等比拉伸)/指定百分比值/cover(背景图以长边为标准等比例缩放)/contain(背景图以短边为标准等比例缩放)，在同一个元素下可以定义多个背景图，每个背景图之间用逗号隔开

2.边框属性
圆角矩形
border-radius：值1 （4个角，值代表半径）
border-radius：值1 值2 （左上右下，左下右上，对角线，值代表半径）
border-radius：值1 值2 值3 值4 （左上，右上，右下，左下，顺时针，值代表半径）
border-top-left-radius:左上
border-top-right-radius:右上
border-bottom-left-radius:左下
border-bottom-right-radius：右下

使用图片作为边框
border-image：url(路径) 边距1 边距2 边距3 边距4/边框宽度 是否平铺(有repeat/round/stretch)

3.盒阴影
box-shadow: 水平偏移距离 垂直偏移距离 模糊距离 阴影尺寸 阴影颜色 内/外部阴影
例：box-shadow: 10px 10px 5px #888;

2D效果
1.css3过渡
transition：all 2s
说明：简写属性，四个属性合起来
transition-property：width,height,background...
说明：过渡作用于，多个作用对象用逗号隔开
transition-duration： 2s
说明：过渡时间
transition-delay：2s;
说明：延迟2s触发再开始过渡

transition-timing-function：linear/ease/ease-in/ease-out/ease-in-out/cubic-bezier(n,n,n,n);
说明：规定过渡效果的时间曲线，默认是ease
linear：匀速
ease：中间变快，两头变慢
ease-in：开始的时候慢，之后快
ease-out：开始时快，结束时候间慢
ease-in-out：中间不变，两头变慢
cubic-bezier(n,n,n,n)：在cubic-bezier 函数中定义自己的值，可能的值是 0 至 1 之间的数值


2.2D变化
注：IE9-浏览器不支持，safari3.1-8、android2.1-4.4.4、IOS3.2-8.4都需要添加前缀，其他更高版本浏览器可使用标准写法
transform：rotate(角度deg)/translate:(x,y)/scale:(x,y)/skew:(x,y)
说明：transform后接变化的方式

transform：rotateX/rotateY/rotate(值)
说明：旋转，正数顺时针，负数逆时针,单位deg
transform：translateX/translateY/translate(x,y)/translate(值)
说明：移动，可单独输入正负x或y值，也可以同时输入用逗号隔开
transform：scaleX/scaleY/scale(x,y)/scale(值)
说明：倍数缩放，中心为元素中心，等于零为无，小于1为缩小，等于1为原来大小，大于1为放大，
transform：skewX/skewY/skew(x,y)
说明：按角度扭曲，单位deg
transform-origin:x y;设置原点
例：
transform-origin: bottom center;

简写：transform：rotate(角度deg) translate:(x,y) scale:(x,y) skew:(x,y)
说明：用空格隔开，特别要注意安排动作顺序

3D效果
注：IE9-浏览器不支持，safari3.1-8、android2.1-4.4.4、IOS3.2-8.4都需要添加前缀，其他更高版本浏览器可使用标准写法，旋转，缩放都类似于2D，只是加多了z轴
transform：rotate(角度deg)/translate:(x,y)/scale:(x,y)/skew:(x,y)
说明：transform后接变化的方式

transform：rotateX()/rotateY()/rotateZ()
说明：旋转，正数顺时针，负数逆时针
transform：translateX()/translateY()/translateZ()
说明：移动，可单独输入正负x或y值，也可以同时输入用逗号隔开
transform：scaleX()/scaleY()/scaleZ()
说明：倍数缩放，中心为元素中心，基数为1，大于1为放大，小于1为缩小
transform：transform-origin:x-axis y-axis z-axis;设置原点(写法类似background)
支持简写：transform：rotate(角度deg) translate:(x,y) scale:(x,y)


打开3D效果的关键(必须)
在父元素中设置
设置过渡效果(transition:all 2s;)
打开3d效果让所有子元素在3D空间中呈现：transform-style:preserve-3d;默认为flat即2D效果
设置透视点：perspective：一般800-1200px;数值越小3D效果越夸张，透视点的位置决定了3D效果站位
backface-visibility:visible(可见)/hidden(不可见)
说明：定义当元素不面向屏幕时是否可见，例如旋转元素的背面

css3动画
关键帧动画
通过@keyframes创建动画，百分比规定发生的时间
1.规定动画的名称
2.规定动画的时长
3.将@keyframes捆绑到某个选择器
语法：
@keyframes 名字1 {	
	0%(或者from) {...}
			.
			.
			.
	100%(或者to) {...}
}
选择器 {animation-name:名字1;animation-duration:2s;...}或支持简写{animation:名字1 2s ...;}
四个属性：animation-timing-function:规定动画的速度曲线；
		 animation-delay:延迟几秒；
		 animation-iteration-count:播放几遍，有n(数字)/infinite(不断重复);
		 animation-direction:播放方式，有normal/alternate(反向播放)
		 animation-play-state:paused(规定动画已暂停)/running(规定动画正在播放);一般跟js一起使用

弹性盒
弹性盒引入主轴和侧轴概念
一般主轴类似x轴，侧轴类似y轴，但有方法可以使两轴互换
主轴侧轴都有起点和终点

转换成弹性盒的步骤
display:flex/inline-flex;
flex:将对象变为弹性属性，当父元素变为弹性盒，子元素将变成float属性(元素浮动后display变为block)，并且父元素不会有高度塌陷
inline-flex:同上，不过宽度也随着子元素元素变化

容器的属性
修改主轴的方向
flex-direction:row/row-reverse/column/column-reverse
说明：修改轴方向和起点，默认情况下沿着主轴排列
row:默认位置，主轴位置为初始位置即x轴位置，起点在左，子元素排列起点从主侧轴起点开始
row-reverse:主轴子元素排列起点变为从主轴终点开始，侧轴不变
column:将主轴和侧轴互换
column-reverse:将主轴和侧轴互换且终点起点互换

子元素换行
flex-wrap:nowrap/warp/wrap-reverse;
说明：当子元素超出父元素时的是否换行
nowrap:子元素溢出时不换行，子元素自动变窄
wrap:子元素溢出时换行
wrap-reverse:子元素溢出时换行，且倒序排列

flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap

子元素在主轴上的排列
justify-content：flex-start/flex-end/center/space-between/space-around
说明：定义弹性盒中的子元素的主轴方向的对齐位置
flex-start:起点对齐
center:中间对齐
flex-end:终点对齐
space-between:在弹性盒中等分排列从元素本身开始以元素本身结束
space-around:在弹性盒中等分排列从margin开始以margin结束

每行子元素在侧轴上的排列
align-items：flex-start/flex-end/center/baseline/stretch
说明：定义弹性盒中的一行子元素的侧轴的对齐位置
flex-start:所有子元素的头部对齐，不管子元素自身的高低
center:所有子元素的中部对齐，不管子元素自身的高低
flex-end:所有子元素的底部对齐，不管子元素自身的高低
baseline:所有子元素的文字基线对齐，不管子元素自身的高低
stretch:把所有子元素的高拉成平齐然后对齐，拉伸后的高度由

在側轴方向上有额外空间时子元素的排列，当容器只有一行时无效
align-content：flex-start/flex-end/center/space-between/space-around/stretch
说明：定义弹性盒中的多行行子元素的侧轴的对齐位置，当父元素有高度且子元素换行时沿侧轴的对齐方式(需在flex-wrap:wrap模式下)
flex-start:起点对齐
center:中间对齐
flex-end:终点对齐
space-between:在弹性盒中等分排列从元素本身开始以元素本身结束
space-around:在弹性盒中等分排列从margin开始以margin结束
stretch:默认值，当换行时等分排列从元素本身开始以margin结束

子元素属性
flex-grow:值(默认为0即不分配)
说明：写在子元素里，将容器里剩余的空间按规定比例分配给子元素，让子元素延展填满容器，每个子元素后的值代表获得的比例

flex-shrink:值(默认为1)
说明：写在子元素里，将超出容器的部分里按规定比例分配给子元素，让子元素缩减适应容器，每个子元素后的值代表被移除的权重比例

flex-basis:值/auto
说明：设置或检索弹性盒伸缩基准值

flex是flex-grow、flex-shrink、flex-basis的缩写，默认是flex:0 1 auto;
最常用flex:1;表示将剩余空间按1份比例分配给某元素

order：值(默认为0)
说明：给子元素重新排序，值越小越靠前

align-self:auto/flex-start/flex-end/center/baseline/stretch
说明：定义弹性盒中的单个子元素的侧轴对齐方式
flex-start:起点对齐
center:中间对齐
flex-end:终点对齐
baseline:定义文字基线，子元素内文字会沿基线排列
stretch:如果未设置子元素宽高，子元素将拉伸为父亲元素高度，但同时会遵守min/max-width/height的规则

媒体查询
说明：查询显示器特性
@media (only) 媒体类型 and/not (媒体条件) and/not/only(媒体条件)... {...}
<style>
	/* 仅当媒体类型为显示屏且最小宽度为640px时(不小于640px)引用该样式 */
	@media only screen and (min-width: 640px) {
		body {
			...
		}
		div {
			...
		}
	}
</style>

媒体类型
screen：适用于计算机显示器(最常用)
handheld：适用于小型或者手提设备
all：适用于所有的设备
aural：适用于语音和音频合成器
braille：适用于触觉反馈设备
embossed：适用于凸点文字(盲文)印刷设备
print：适用于打印机
projection：适用于投影图像，如幻灯片
tty：适用于使用固定间距字符格的设备，如电传打字机和终端
tv：适用于电视类设备

媒体条件
width：匹配浏览器宽度，如100px，支持max/min
height：匹配浏览器高度，如100px，支持max/min
aspect-ratio：匹配浏览器的宽度值和高度值的比例，如16/9，支持max/min，
device-width：匹配分辨率的宽度值，如100px，支持max/min
device-height：匹配分辨率的高度值，如100px，支持max/min
divice-aspect-ratio：匹配分辨率的宽度值和高度值的比例，比例值，如16/9，支持max/min
color：整数值，支持max/min，比如真彩色是32，如果不是彩色设备则为0
color-index：匹配设备使用多少位的色深，整数值，支持max/min，匹配色彩表中的颜色数
monochrome：匹配单色帧缓冲器中每个像素的位(bit)数，整数值，支持max/min，如果不是单色设备这个数值为0
resolution：匹配设备的物理分辨率，分辨率，如300dpi，支持max/min，
scan：匹配设备的扫描方式，只能是progressive或interlace，不支持max/min，其中progressive代表逐行扫描，interlace代表隔行扫描
grid：匹配设备是否基于栅格，只能是0或1，不支持max/min，1代表基于山歌，0代表其他类型

移动端布局
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=no">
响应式布局
内联写法
@media only screen and (min-width: 640px){ body {...} div {...} }
说明：仅当媒体类型为显示屏且最小宽度为640px时(不小于640px)引用该样式
外联写法
先写好另一套样式，然后用<link>导入
方法：<link rel="stylesheet" media="(only) 媒体类型 and/not (媒体条件)" href="路径">
例：<link rel="stylesheet" media="only screen and (max-width: 640px)" href="路径">
说明：仅当媒体类型为显示屏且最大宽度为640px时(不超过640px)引用该样式

百分比(弹性)布局

rem(等比缩放)布局(弹性布局)
px为像素单位
em不是固定值，是根据父元素的font-size做改变的值，默认情况下字体为16px,则1em=16px,2em=2*16px
所以em是px的倍数
rem是指相对于根元素的字体大小的单位，跟em类似，不过rem是根据html页面的font-size大小变化的
使用方法
将html的font-size设置为固定值(按照不同媒体类型设置不同值)，之后所有需要变化的地方都改成rem单位，这样只要修改html的font-size值(px)，所有的rem也会随之变化

透明度
opacity: 0.5;
说明：规定不透明度，从0.0(完全透明)到1.0(完全不透明)，所有浏览器都支持opacity属性，IE8以及更早的版本支持替代的filter属性
例：filter:Alpha(opacity=50)表示透明度50%
注：设置了opacity的父元素，此属性一定会被子元素继承，父子属性都设置了透明度，最终值是两透明度相乘

background-color：rgba(55,167,215,0.5)
说明：其中第四项为透明度，0为全透明，1为不透明
注：
background-color:rgba(55,167,215,0.5);
等价于：
background-color:rgb(55,167,215);opacity:0.5;
区别在于background-color:rgba()不会被子元素继承透明度，并且IE7和8不支持rgba()

magin: 0 auto;无法居中
解决：检查元素是不是block，有没有宽度(不能是被撑大的宽度)，可以是百分比，rem，px等，但必须有一个宽度

width,height 100%无效
解决：html,body是否有100%

元素定位position
<style>
	div {
		position: static; 默认值
		position: absolute;
		position: relative;
		position: fixed;
	}
</style>
控制位置left,top,right,bottom和z-index
z-index:检索设置对象的层叠顺序，值类型：
auto(自动，按照写入的顺序层叠)
数字(可以为负)
<style>
	div {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		z-index: 1;
	}
</style>

图片整合
将所有图片整合为一张图片，然后通过background-position控制图片位置
background-position：值1(左右)，值2(上下)

宽高自适应
1.块元素不写宽高自带宽高自适应，但在无内容时会消失，可设置最小高度min-height，最大高度max-height，最小宽度min-width，最大宽度max-width
2.使用height:100%,使用时<html>和<body>都加上height:100%才有效果，即html,body {height:100%}
3.height:100%指的是其相对于父块高度而定义的高度，所以父块必须有高度值
4.height：auto表示根据块内容自动调节高度

子元素100%，父元素加padding后，子元素会超出父元素
解决：把父元素的box-sizing值设为border-box，然后给父元素加padding

100%后减去一部分值
例：height: calc(100% - 90px);

取消文字选中效果（避免拖动时选中文字）
<style>
	p,div,span,li,table,label{ 
		user-select: none;
	}
</style>

行高设置为自动
<style>
	aaa {
		line-height: normal;
	}
</style>
渐变
<style>
	aaa {
		background-image: linear-gradient(to top, #a18cd1 0%, #fbc2eb 100%);
	}
	aaa {
		background-image: linear-gradient(to right, #ff8177 0%, #ff867a 0%, #ff8c7f 21%, #f99185 52%, #cf556c 78%, #b12a5b 100%);
	}
</style>
水平居中（定宽定高）
<style>
	aaa {
		margin: auto;
		position: absolute;
		top: 100px;
		left: 0;
		right: 0;
	}
</style>